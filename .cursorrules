# 《吃什么》Flutter项目开发规范

## 项目概述
这是一个Flutter跨平台移动应用，通过创新的气泡交互方式帮助用户解决饮食选择困难。

## 开发原则

### 1. 代码组织
- 遵循Flutter官方项目结构
- 使用feature-first的目录组织方式
- 核心功能放在`core/`目录
- 功能模块放在`features/`目录
- 共享组件放在`shared/`目录

### 2. 命名规范
- 文件名使用snake_case
- 类名使用PascalCase
- 变量和方法名使用camelCase
- 常量使用SCREAMING_SNAKE_CASE
- 私有成员以下划线开头

### 3. 代码质量
- 使用`flutter analyze`检查代码质量
- 遵循Dart官方代码风格指南
- 使用`debugPrint`而不是`print`
- 添加必要的注释和文档
- 使用const构造函数优化性能

### 4. 状态管理
- 使用Provider进行状态管理
- 控制器继承ChangeNotifier
- 在dispose中清理资源
- 避免在build方法中进行复杂计算

### 5. UI/UX设计
- 遵循Material Design规范
- 支持深色模式
- 确保无障碍访问性
- 使用响应式设计适配不同屏幕
- 优化动画性能

### 6. 数据模型
- 使用不可变数据模型
- 提供copyWith方法
- 实现toJson/fromJson序列化
- 使用Hive进行本地存储

### 7. 错误处理
- 使用try-catch处理异常
- 提供用户友好的错误信息
- 记录错误日志
- 实现优雅降级

### 8. 性能优化
- 使用const构造函数
- 避免不必要的重建
- 优化列表渲染
- 合理使用缓存

## 特定功能规范

### 气泡系统
- 气泡必须有唯一ID
- 支持多种手势操作
- 实现物理引擎效果
- 记录用户交互历史

### 推荐引擎
- 基于用户偏好计算匹配度
- 支持多维度推荐
- 实现学习算法
- 提供推荐解释

### 用户偏好
- 实时更新用户偏好
- 支持偏好导入导出
- 保护用户隐私
- 提供重置功能

## 测试规范
- 为核心功能编写单元测试
- 为UI组件编写Widget测试
- 为用户流程编写集成测试
- 保持测试覆盖率在80%以上

## Git提交规范
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 代码重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

## 依赖管理
- 定期更新依赖包
- 避免使用过时的包
- 评估新依赖的必要性
- 保持pubspec.yaml整洁

## 发布流程
1. 代码审查
2. 测试验证
3. 版本号更新
4. 构建发布包
5. 应用商店发布

## 注意事项
- 优先考虑用户体验
- 保持代码简洁可读
- 及时处理技术债务
- 关注应用性能
- 确保跨平台兼容性 